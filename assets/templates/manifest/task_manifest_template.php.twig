<?php

{% autoescape false %}
/**
 * Copyright Â© 2019-present Spryker Systems GmbH. All rights reserved.
 * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
 */

namespace Custom\Task;

use SprykerSdk\Sdk\Core\Domain\Entity\Command;
use SprykerSdk\Sdk\Core\Domain\Entity\Lifecycle\InitializedEventData;
use SprykerSdk\Sdk\Core\Domain\Entity\Lifecycle\Lifecycle;
use SprykerSdk\Sdk\Core\Domain\Entity\Lifecycle\RemovedEventData;
use SprykerSdk\Sdk\Core\Domain\Entity\Lifecycle\UpdatedEventData;
use SprykerSdk\SdkContracts\Entity\Lifecycle\LifecycleInterface;
use SprykerSdk\SdkContracts\Entity\TaskInterface;
use SprykerSdk\Sdk\Core\Domain\Entity\Placeholder;
class {{ data.manifestFile.fileName }} implements TaskInterface
{
    /**
     * {@inheritDoc}
     *
     * @return string
     */
    public function getShortDescription(): string
    {
        return '{{ data.shortDescription|replace({'\'':'\\\''}) }}';
    }

    /**
     * {@inheritDoc}
     *
     * @return array<\SprykerSdk\SdkContracts\Entity\PlaceholderInterface>
     */
    public function getPlaceholders(): array
    {
        {%~ if data.placeholders %}
        return [
            {%~ for placeholder in data.placeholders %}
            new Placeholder(
                '{{ placeholder.name }}',
                '{{ placeholder.valueResolver }}',
                [
                {%~ for key, configItem in placeholder.configuration %}
                    {%~ if configItem is iterable %}
                    '{{ key }}' => [
                        {%~ for key, configSubItem in configItem %}
                            {%~ if key matches '/\\d+/'  %}
                        '{{ configSubItem }}',
                            {%~ else %}
                        '{{ key }}' => '{{ configSubItem }}',
                            {%~ endif %}
                        {%~ endfor %}
                    ],
                    {%~ else %}
                        {%~ if key == 'type' %}
                            {%~ set constCodeDefinition = class_const('\\SprykerSdk\\SdkContracts\\Enum\\ValueTypeEnum', configItem) %}
                            {%~ set configValue = constCodeDefinition is null ? '\'' ~ configItem ~ '\'' : constCodeDefinition %}
                        {%~ else %}
                            {%~ set configValue = '\'' ~ configItem ~ '\'' %}
                        {%~ endif %}
                    '{{ key }}' => {{ configValue }},
                    {%~ endif %}
                {%~ endfor %}
                ],
                {{ placeholder.optional ? 'true' : 'false' }},
            ),
            {%~ endfor  %}
        ];
        {%~ else %}
        return [];
        {%~ endif %}
    }

    /**
     * {@inheritDoc}
     *
     * @return string|null
     */
    public function getHelp(): ?string
    {
        return null;
    }

    /**
     * {@inheritDoc}
     *
     * @return string
     */
    public function getId(): string
    {
        return '{{ data.id }}';
    }

    /**
     * {@inheritDoc}
     *
     * @return array<\SprykerSdk\SdkContracts\Entity\CommandInterface>
     */
    public function getCommands(): array
    {
        {%~ set constTypeDefinition = class_const('\\SprykerSdk\\SdkContracts\\Enum\\Task', data.type) %}
        {%~ set typeValue = constTypeDefinition is null ? '\'' ~ data.type ~ '\'' : constTypeDefinition %}
        return [
            new Command('{{ data.command|replace({'\'':'\\\''}) }}', {{ typeValue }}),
        ];
    }

    /**
     * {@inheritDoc}
     *
     * @return string
     */
    public function getVersion(): string
    {
        return '{{ data.version }}';
    }

    /**
     * {@inheritDoc}
     *
     * @return bool
     */
    public function isDeprecated(): bool
    {
        return false;
    }

    /**
     * {@inheritDoc}
     *
     * @return bool
     */
    public function isOptional(): bool
    {
        return false;
    }

    /**
     * {@inheritDoc}
     *
     * @return string|null
     */
    public function getSuccessor(): ?string
    {
        return null;
    }

    /**
     * {@inheritDoc}
     *
     * @return \SprykerSdk\SdkContracts\Entity\Lifecycle\LifecycleInterface
     */
    public function getLifecycle(): LifecycleInterface
    {
        return new Lifecycle(
            new InitializedEventData(),
            new UpdatedEventData(),
            new RemovedEventData(),
        );
    }

    /**
     * {@inheritDoc}
     *
     * @return array<string>
     */
    public function getStages(): array
    {
        return [];
    }
}
{% endautoescape %}
