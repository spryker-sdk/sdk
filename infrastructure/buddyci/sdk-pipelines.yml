-   pipeline: "SDK Post-Deployment Smoke Testing"
    on: "CLICK"
    refs:
        - "refs/heads/master"
    always_from_scratch: true
    terminate_stale_runs: true
    auto_clear_cache: true
    fail_on_prepare_env_warning: true
    variables:
        -   key: "GH_TOKEN"
            value: "secure!8Th+XRNi+x0E4/q+trynssaoyPpWo/M9Z0OZL0qmDGqRGYh9mrScQ8JoOH6AImpI.A3YcoiZ8nLUIolQeEYBWAA=="
            type: "VAR"
            encrypted: true
        -   key: "GH_USER"
            value: "pavelmaksymov25"
            type: "VAR"
            settable: true
    actions:
        -   action: "Install SDK"
            type: "NATIVE_BUILD_DOCKER_CLI"
            commands:
                - "rm -rf spryker-sdk && mkdir spryker-sdk \\"
                - "&& cd spryker-sdk \\"
                - "&& export PATH_TO_SDK=$(pwd) \\"
                - "&& echo $PATH_TO_SDK \\"
                - "&& curl -fL github.com/spryker-sdk/sdk/releases/latest/download/installer.sh -O \\"
                - "&& chmod +x installer.sh \\"
                - "&& ./installer.sh \"${PATH_TO_SDK}\" \\"
                - "&& rm -f installer.sh \\"
                - "&& echo \"Current SDK version: $($PATH_TO_SDK/bin/spryker-sdk.sh --version)\" \\"
                - "&& $PATH_TO_SDK/bin/spryker-sdk.sh"
            docker_layer_caching_scope: "ACTION"
        -   action: "Install B2B Marketplace"
            type: "NATIVE_BUILD_DOCKER_CLI"
            commands:
                - "sudo rm -rf ${REPOSITORY_NAME} && mkdir ${REPOSITORY_NAME} && cd ${REPOSITORY_NAME} \\"
                - "&& export GITHUB_TOKEN=${GH_TOKEN} \\"
                - "&& export COMPOSER_AUTH='{\"github-oauth\": {\"github.com\": \"'${GH_TOKEN}'\"}}' \\"
                - "&& git clone https://${GH_USER}:${GH_TOKEN}@github.com/spryker-projects/${REPOSITORY_NAME} ./ \\"
                - "&& git checkout \"$PROJECT_BRANCH\" \\"
                - "&& git clone https://${GH_USER}:${GH_TOKEN}@github.com/spryker/docker-sdk.git docker \\"
                - "&& awk '/^[a-zA-Z_\\-]+:/ {level1=$0}  /^    [a-zA-Z_\\-]+:/ {level2=$0} level1 ~ \"services:\" && level2 ~ \" scheduler:\" {next} 1' deploy.dev.yml > deploy.dev.yml.t && mv deploy.dev.yml.t  deploy.dev.yml \\"
                - "&& awk '/^[a-zA-Z_\\-]+:/ {level1=$0}  /^    [a-zA-Z_\\-]+:/ {level2=$0} level1 ~ \"services:\" && level2 ~ \" mail_catcher:\" {next} 1' deploy.dev.yml > deploy.dev.yml.t && mv deploy.dev.yml.t  deploy.dev.yml \\"
                - "&& awk '/^[a-zA-Z_\\-]+:/ {level1=$0}  /^    [a-zA-Z_\\-]+:/ {level2=$0} level1 ~ \"services:\" && level2 ~ \" redis-gui:\" {next} 1' deploy.dev.yml > deploy.dev.yml.t && mv deploy.dev.yml.t  deploy.dev.yml \\"
                - "&& awk '/^[a-zA-Z_\\-]+:/ {level1=$0}  /^    [a-zA-Z_\\-]+:/ {level2=$0} level1 ~ \"services:\" && level2 ~ \" dashboard:\" {next} 1' deploy.dev.yml > deploy.dev.yml.t && mv deploy.dev.yml.t  deploy.dev.yml \\"
                - "&& docker/sdk boot deploy.dev.yml \\"
                - "&& sed -i 's/- \"80:80\"/- \"8888:80\"/g' docker/deployment/default/docker-compose.yml \\"
                - "&& docker/sdk up --build \\"
                - "&& docker/sdk down"
                - ""
            timeout: 5400
            docker_layer_caching_scope: "ACTION"
            vm_from_prev_action: true
            instance_type: "GENERAL_MEDIUM"
        -   action: "Make jobs"
            type: "NATIVE_BUILD_DOCKER_CLI"
            commands:
                - "export SDK_CI_EXECUTION=1 \\"
                - "&& cd ${REPOSITORY_NAME} && rm -rf .ssdk \\"
                - "&& ./../spryker-sdk/bin/spryker-sdk.sh sdk:init:project --qa_tasks=validation:php:codestyle-check --workflow=hello_php -q \\"
                - "&& ./../spryker-sdk/bin/spryker-sdk.sh sdk:qa:run --path=src \\"
                - "&& ./../spryker-sdk/bin/spryker-sdk.sh validation:php:codestyle-check --path=src -vvv \\"
                - "&& ./../spryker-sdk/bin/spryker-sdk.sh hello:php -vvv \\"
                - "&& ./../spryker-sdk/bin/spryker-sdk.sh hello:php:staged_set --foo=FOO --bar=BAR -vvv \\"
                - "&& ./../spryker-sdk/bin/spryker-sdk.sh validation:php:codestyle --path=src -vvv \\"
                - "&& ./../spryker-sdk/bin/spryker-sdk.sh sdk:workflow:run hello_php -n -vvv"
                - ""
            docker_layer_caching_scope: "ACTION"
            vm_from_prev_action: true
-   pipeline: "SDK Pre-Deployment Testing"
    events:
        -   type: "PUSH"
            refs:
                - "refs/heads/rc"
    terminate_stale_runs: true
    auto_clear_cache: true
    fail_on_prepare_env_warning: true
    variables:
        -   key: "GITHUB_TOKEN"
            value: "secure!lifFbTk9QlCr191sBzpx4KIZkBNwWx/90del0UAlelDR0GWW9Y8+XOUMALIrqsf7.W4VCKPKPwKz6UdZjiUPlhg=="
            type: "VAR"
            encrypted: true
        -   key: "ORGANIZATION_NAME"
            value: "spryker-projects"
            type: "VAR"
        -   key: "PROJECT_PATH"
            value: "project"
            type: "VAR"
        -   key: "PROJECT_REPO"
            value: "https://github.com/spryker-projects/upg_b2b-demo-shop"
            type: "VAR"
        -   key: "TOOL_REPOSITORY_CLEANER_GIT_URL"
            value: "https://github.com/pavelmaksimov25/repo-cleaner.git"
            type: "VAR"
        -   key: "TOOL_REPOSITORY_CLEANER_LOCAL_PATH"
            value: "repo_cleaner"
            type: "VAR"
    actions:
        -   action: "Build and push SDK image"
            type: "DOCKERFILE"
            docker_image_tag: "$DOCKER_IMAGE_TAG"
            dockerfile_path: "./infrastructure/sdk.sprykerci80.Dockerfile"
            context_path: "."
            repository: "$DOCKER_IMAGE"
            do_not_prune_images: true
            integration_hash: "L39J4q2VolejOpAPajNmGQBW71"
        -   action: "Clone Demo Shop project"
            type: "GIT_HUB_CLI"
            execute_commands:
                - "gh repo clone \"$PROJECT_REPO\" \"$PROJECT_PATH\""
                - "cd \"$PROJECT_PATH\""
                - "git checkout \"$PROJECT_BRANCH\""
            shell: "BASH"
            integration_hash: "rG7YBDXMVyb8BQXgevAZEJ24gN"
        -   action: "Clean up Demo Shop repository"
            type: "BUILD"
            docker_image_name: "library/php"
            docker_image_tag: "8.2.8"
            execute_commands:
                - ""
                - "DIR=\"$TOOL_REPOSITORY_CLEANER_LOCAL_PATH\""
                - "[ ! -d \"$DIR\" ] && git clone $TOOL_REPOSITORY_CLEANER_GIT_URL \"$DIR\""
                - ""
                - "cd \"$DIR\""
                - ""
                - "composer install"
                - ""
                - "php bin/repoclean.php ${ORGANIZATION_NAME} ${REPOSITORY_NAME}"
            setup_commands:
                - "echo \"memory_limit=-1\" >> /usr/local/etc/php/conf.d/buddy.ini"
                - "apt-get update && apt-get install -y git zip"
                - "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer"
                - ""
                - "# php ext gd"
                - "apt-get install -y libfreetype6-dev"
                - "apt-get install -y libjpeg62-turbo-dev"
                - "apt-get install -y libpng-dev"
                - "docker-php-ext-configure gd --with-freetype --with-jpeg"
                - "docker-php-ext-install gd"
                - ""
                - "# php ext pdo_mysql"
                - "docker-php-ext-configure pdo_mysql --with-pdo-mysql"
                - "docker-php-ext-install pdo_mysql"
                - ""
                - "# php ext zip"
                - "apt-get install -y zip"
                - "apt-get install -y unzip"
                - "apt-get install -y zlib1g-dev"
                - "apt-get install -y libzip-dev"
                - "docker-php-ext-install zip"
            volume_mappings:
                - "/:/buddy/sdk"
            ignore_errors: true
            shell: "BASH"
            variables:
                -   key: "ORGANIZATION_NAME"
                    value: "spryker-projects"
                    type: "VAR"
                    settable: true
                -   key: "REPOSITORY_NAME"
                    value: "upg_b2b-demo-shop"
                    type: "VAR"
                    settable: true
            timeout: 180
        -   action: "Build and Run Upgrader"
            type: "NATIVE_BUILD_DOCKER_CLI"
            commands:
                - "SOURCE_CODE_PROVIDER=\"github\""
                - "COMPOSER_GLOBAL_CMD=\"\""
                - "SOURCE_CODE_PROVIDER_URL=\"\""
                - ""
                - "ACCESS_TOKEN=\"$GITHUB_TOKEN\""
                - "REPO_URL_ENDING=\".git\""
                - "COMPOSER_GLOBAL_CMD=\"composer global config -g github-oauth.github.com ${ACCESS_TOKEN}\""
                - "PROJECT_NAME=\"\""
                - ""
                - "docker pull ${DOCKER_IMAGE}:${DOCKER_IMAGE_TAG}"
                - ""
                - "cd \"$PROJECT_PATH\""
                - "git remote set-url origin https://${ORGANIZATION_NAME}:${ACCESS_TOKEN}@github.com/${ORGANIZATION_NAME}/${REPOSITORY_NAME}.git"
                - "git checkout \"$PROJECT_BRANCH\""
                - "cd .."
                - ""
                - "docker run -u spryker --rm -v ${PWD}/\"$PROJECT_PATH\":/data/project \\"
                - "-e ACCESS_TOKEN=${ACCESS_TOKEN} \\"
                - "-e ORGANIZATION_NAME=${ORGANIZATION_NAME} \\"
                - "-e REPOSITORY_NAME=${REPOSITORY_NAME} \\"
                - "-e SOURCE_CODE_PROVIDER=${SOURCE_CODE_PROVIDER} \\"
                - "-e SOURCE_CODE_PROVIDER_URL=\"${SOURCE_CODE_PROVIDER_URL}\" \\"
                - "-e COMPOSER_GLOBAL_CMD=\"${COMPOSER_GLOBAL_CMD}\" \\"
                - "-e PROJECT_NAME=\"${PROJECT_NAME}\" \\"
                - "-e UPGRADE_STRATEGY=release-app \\"
                - "-e RELEASE_GROUP_PROCESSOR=sequential \\"
                - "-e INTEGRATOR_ENABLED=true \\"
                - "-e EVALUATOR_ENABLED=true \\"
                - "-e REPORTING_ENABLED=false \\"
                - "-e REPORT_SEND_AUTH_TOKEN=\"\" \\"
                - "-e NEWRELIC_ENABLED=false \\"
                - "-e NEWRELIC_LICENSE=\"\" \\"
                - "-e NEWRELIC_APPNAME=\"\" \\"
                - "-e NEWRELIC_LOGLEVEL=\"\" \\"
                - "-e RELEASE_GROUP_ID=\"\" \\"
                - "-e APP_ENV=\"sprykerci\" \\"
                - "${DOCKER_IMAGE}:${DOCKER_IMAGE_TAG} 'git config --global user.email upgrader@spryker.com "
                - "&& git config --global user.name \"upgrader\" "
                - "&& $COMPOSER_GLOBAL_CMD"
                - "&& echo \"$COMPOSER_GLOBAL_CMD\""
                - "&& cd /data/project"
                - "&& composer install --no-scripts "
                - "&& php --version"
                - "&& git status"
                - "&& ((git branch -D `git branch | grep -E \"upgradebot\\/\"` > /dev/null 2>&1) || true) "
                - "&& /data/bin/console upgradability:php:upgrade -vvv'"
            variables:
                -   key: "ACCESS_TOKEN"
                    value: "secure!lifFbTk9QlCr191sBzpx4KIZkBNwWx/90del0UAlelDR0GWW9Y8+XOUMALIrqsf7.W4VCKPKPwKz6UdZjiUPlhg=="
                    type: "VAR"
                    encrypted: true
                -   key: "SOURCE_CODE_PROVIDER"
                    value: "github"
                    type: "VAR"
            docker_layer_caching_scope: "ACTION"
            instance_type: "GENERAL_MEDIUM"
        -   action: "Check is PR created"
            type: "GIT_HUB_CLI"
            execute_commands:
                - "PRS_CNT=$(gh search prs --owner=\"$ORGANIZATION_NAME\" --repo=\"$REPOSITORY_NAME\" --state=open --json title --jq='.[] | select(.title | test(\"^Auto-updating Spryker modules on+\", \"g\"))' | wc -l)"
                - " "
                - "if [ \"$PRS_CNT\" -eq 0 ]"
                - "then"
                - "    echo 'Test failed: Open PR is not found.'"
                - "    exit 1"
                - "fi"
                - ""
                - "echo 'Test passed: Open PR is detected.'"
            shell: "BASH"
            integration_hash: "Nz7x3VXyMYerMAg4dOBQn6LlRG"
        -   action: "Clean up Demo Shop repository"
            type: "BUILD"
            docker_image_name: "library/php"
            docker_image_tag: "8.2.8"
            execute_commands:
                - ""
                - "DIR=\"$TOOL_REPOSITORY_CLEANER_LOCAL_PATH\""
                - "[ ! -d \"$DIR\" ] && git clone $TOOL_REPOSITORY_CLEANER_GIT_URL \"$DIR\""
                - ""
                - "cd \"$DIR\""
                - ""
                - "composer install"
                - ""
                - "php bin/repoclean.php ${ORGANIZATION_NAME} ${REPOSITORY_NAME}"
            setup_commands:
                - "echo \"memory_limit=-1\" >> /usr/local/etc/php/conf.d/buddy.ini"
                - "apt-get update && apt-get install -y git zip"
                - "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer"
                - ""
                - "# php ext gd"
                - "apt-get install -y libfreetype6-dev"
                - "apt-get install -y libjpeg62-turbo-dev"
                - "apt-get install -y libpng-dev"
                - "docker-php-ext-configure gd --with-freetype --with-jpeg"
                - "docker-php-ext-install gd"
                - ""
                - "# php ext pdo_mysql"
                - "docker-php-ext-configure pdo_mysql --with-pdo-mysql"
                - "docker-php-ext-install pdo_mysql"
                - ""
                - "# php ext zip"
                - "apt-get install -y zip"
                - "apt-get install -y unzip"
                - "apt-get install -y zlib1g-dev"
                - "apt-get install -y libzip-dev"
                - "docker-php-ext-install zip"
            volume_mappings:
                - "/:/buddy/sdk"
            ignore_errors: true
            shell: "BASH"
            variables:
                -   key: "ORGANIZATION_NAME"
                    value: "spryker-projects"
                    type: "VAR"
                    settable: true
                -   key: "REPOSITORY_NAME"
                    value: "upg_b2b-demo-shop"
                    type: "VAR"
                    settable: true
            timeout: 180
        -   action: "Clear cache"
            type: "CLEAR_CACHE"
            cache_types:
                - "DOCKER"
                - "FILE_SYSTEM"
                - "SERVICES"
                - "ADDITIONAL"
                - "DOCKER_CLI"
        -   action: "Execute php bin/repoclean.php ${ORGANIZATION_NAME} ${REPOSITORY_NAME}"
            type: "BUILD"
            trigger_time: "ON_FAILURE"
            docker_image_name: "library/php"
            docker_image_tag: "8.2.9"
            execute_commands:
                - "git clone https://github.com/pavelmaksimov25/repo-cleaner.git repo_cleaner"
                - ""
                - "cd repo_cleaner"
                - ""
                - "composer install"
                - ""
                - "php bin/repoclean.php ${ORGANIZATION_NAME} ${REPOSITORY_NAME}"
            setup_commands:
                - "echo \"memory_limit=-1\" >> /usr/local/etc/php/conf.d/buddy.ini"
                - "apt-get update && apt-get install -y git zip"
                - "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer"
                - ""
                - "# php ext gd"
                - "apt-get install -y libfreetype6-dev"
                - "apt-get install -y libjpeg62-turbo-dev"
                - "apt-get install -y libpng-dev"
                - "docker-php-ext-configure gd --with-freetype --with-jpeg"
                - "docker-php-ext-install gd"
                - ""
                - "# php ext pdo_mysql"
                - "docker-php-ext-configure pdo_mysql --with-pdo-mysql"
                - "docker-php-ext-install pdo_mysql"
                - ""
                - "# php ext zip"
                - "apt-get install -y zip"
                - "apt-get install -y unzip"
                - "apt-get install -y zlib1g-dev"
                - "apt-get install -y libzip-dev"
                - "docker-php-ext-install zip"
            volume_mappings:
                - "/:/buddy/sdk"
            shell: "BASH"
        -   action: "Clear cache"
            type: "CLEAR_CACHE"
            trigger_time: "ON_FAILURE"
            cache_types:
                - "FILE_SYSTEM"
-   pipeline: "SDK Pre-Deployment Smoke Testing"
    events:
        -   type: "PUSH"
            refs:
                - "refs/heads/rc"
    always_from_scratch: true
    terminate_stale_runs: true
    auto_clear_cache: true
    variables:
        -   key: "GH_TOKEN"
            value: "secure!8Th+XRNi+x0E4/q+trynssaoyPpWo/M9Z0OZL0qmDGqRGYh9mrScQ8JoOH6AImpI.A3YcoiZ8nLUIolQeEYBWAA=="
            type: "VAR"
            encrypted: true
        -   key: "GH_USER"
            value: "pavelmaksymov25"
            type: "VAR"
            settable: true
    change_set_base: "LATEST_RUN_MATCHING_REF"
    actions:
        -   action: "Install SDK"
            type: "NATIVE_BUILD_DOCKER_CLI"
            commands:
                - "rm -rf spryker-sdk; mkdir spryker-sdk \\"
                - "&& cd spryker-sdk \\"
                - "&& export PATH_TO_SDK=$(pwd) \\"
                - "&& echo $PATH_TO_SDK \\"
                - "&& curl -fL github.com/spryker-sdk/sdk/releases/latest/download/installer.sh -O \\"
                - "&& chmod +x installer.sh \\"
                - "&& ./installer.sh \"${PATH_TO_SDK}\" \\"
                - "&& rm -f installer.sh \\"
                - "&& echo \"Current SDK version: $($PATH_TO_SDK/bin/spryker-sdk.sh --version)\" \\"
                - "&& $PATH_TO_SDK/bin/spryker-sdk.sh"
            docker_layer_caching_scope: "ACTION"
            instance_type: "GENERAL_MEDIUM"
        -   action: "Install B2B Marketplace"
            type: "NATIVE_BUILD_DOCKER_CLI"
            commands:
                - "sudo rm -rf ${REPOSITORY_NAME} && mkdir ${REPOSITORY_NAME} && cd ${REPOSITORY_NAME} \\"
                - "&& export GITHUB_TOKEN=${GH_TOKEN} \\"
                - "&& export COMPOSER_AUTH='{\"github-oauth\": {\"github.com\": \"'${GH_TOKEN}'\"}}' \\"
                - "&& git clone https://${GH_USER}:${GH_TOKEN}@github.com/spryker-projects/${REPOSITORY_NAME} ./ \\"
                - "&& git checkout \"$PROJECT_BRANCH\" \\"
                - "&& git clone https://${GH_USER}:${GH_TOKEN}@github.com/spryker/docker-sdk.git docker \\"
                - "&& awk '/^[a-zA-Z_\\-]+:/ {level1=$0}  /^    [a-zA-Z_\\-]+:/ {level2=$0} level1 ~ \"services:\" && level2 ~ \" scheduler:\" {next} 1' deploy.dev.yml > deploy.dev.yml.t && mv deploy.dev.yml.t  deploy.dev.yml \\"
                - "&& awk '/^[a-zA-Z_\\-]+:/ {level1=$0}  /^    [a-zA-Z_\\-]+:/ {level2=$0} level1 ~ \"services:\" && level2 ~ \" mail_catcher:\" {next} 1' deploy.dev.yml > deploy.dev.yml.t && mv deploy.dev.yml.t  deploy.dev.yml \\"
                - "&& awk '/^[a-zA-Z_\\-]+:/ {level1=$0}  /^    [a-zA-Z_\\-]+:/ {level2=$0} level1 ~ \"services:\" && level2 ~ \" redis-gui:\" {next} 1' deploy.dev.yml > deploy.dev.yml.t && mv deploy.dev.yml.t  deploy.dev.yml \\"
                - "&& awk '/^[a-zA-Z_\\-]+:/ {level1=$0}  /^    [a-zA-Z_\\-]+:/ {level2=$0} level1 ~ \"services:\" && level2 ~ \" dashboard:\" {next} 1' deploy.dev.yml > deploy.dev.yml.t && mv deploy.dev.yml.t  deploy.dev.yml \\"
                - "&& docker/sdk boot deploy.dev.yml \\"
                - "&& sed -i 's/- \"80:80\"/- \"8888:80\"/g' docker/deployment/default/docker-compose.yml \\"
                - "&& docker/sdk up --build \\"
                - "&& docker/sdk down"
                - ""
            timeout: 5400
            docker_layer_caching_scope: "ACTION"
            vm_from_prev_action: true
            instance_type: "GENERAL_MEDIUM"
        -   action: "Run tasks"
            type: "NATIVE_BUILD_DOCKER_CLI"
            commands:
                - "export SDK_CI_EXECUTION=1 \\"
                - "&& cd ${REPOSITORY_NAME} && rm -rf .ssdk \\"
                - "&& ./../spryker-sdk/bin/spryker-sdk.sh sdk:init:project --qa_tasks=validation:php:codestyle-check --workflow=hello_php -q \\"
                - "&& ./../spryker-sdk/bin/spryker-sdk.sh sdk:qa:run --path=src \\"
                - "&& ./../spryker-sdk/bin/spryker-sdk.sh validation:php:codestyle-check --path=src -vvv \\"
                - "&& ./../spryker-sdk/bin/spryker-sdk.sh hello:php -vvv \\"
                - "&& ./../spryker-sdk/bin/spryker-sdk.sh hello:php:staged_set --foo=FOO --bar=BAR -vvv \\"
                - "&& ./../spryker-sdk/bin/spryker-sdk.sh validation:php:codestyle --path=src -vvv \\"
                - "&& ./../spryker-sdk/bin/spryker-sdk.sh sdk:workflow:run hello_php -n -vvv"
                - ""
            docker_layer_caching_scope: "ACTION"
            vm_from_prev_action: true
            instance_type: "GENERAL_MEDIUM"
